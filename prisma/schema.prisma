generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  clerkId           String      @unique
  email             String      @unique
  name              String?
  imageUrl          String?
  
  // Subscription data
  stripeCustomerId  String?     @unique
  subscriptionId    String?
  subscriptionStatus String?    @default("inactive")
  subscriptionPlan  String?     @default("free")
  
  // User metadata
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  proposals         Proposal[]
  payments          Payment[]
  auditLogs         AuditLog[]
  apiKeys           ApiKey[]
  
  @@index([email])
  @@index([clerkId])
}

model Proposal {
  id                String      @id @default(cuid())
  userId            String
  
  // Proposal data
  jobTitle          String
  jobDescription    String      @db.Text
  jobUrl            String?
  skills            String?
  tone              String      @default("professional")
  
  // Generated content
  content           String      @db.Text
  confidence        Float
  wordCount         Int
  aiModel           String      @default("gpt-3.5-turbo")
  
  // Metadata
  status            String      @default("draft") // draft, sent, accepted, rejected
  sentAt            DateTime?
  viewedAt          DateTime?
  clientResponse    String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@index([status])
}

model Payment {
  id                String      @id @default(cuid())
  userId            String
  
  // Stripe data
  stripePaymentId   String      @unique
  amount            Int         // in cents
  currency          String      @default("usd")
  status            String      // succeeded, pending, failed
  
  // Payment metadata
  description       String?
  invoiceId         String?
  receiptUrl        String?
  
  createdAt         DateTime    @default(now())
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

model ApiKey {
  id                String      @id @default(cuid())
  userId            String
  
  key               String      @unique
  name              String
  lastUsedAt        DateTime?
  expiresAt         DateTime?
  
  // Permissions
  scopes            String[]    @default(["read:proposals", "write:proposals"])
  
  createdAt         DateTime    @default(now())
  revokedAt         DateTime?
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([key])
}

model AuditLog {
  id                String      @id @default(cuid())
  userId            String?
  
  // Audit data
  action            String      // login, logout, proposal_created, payment_processed, etc.
  resource          String?     // proposal, payment, user, etc.
  resourceId        String?
  
  // Request metadata
  ipAddress         String?
  userAgent         String?
  method            String?
  path              String?
  
  // Additional context
  metadata          Json?
  
  createdAt         DateTime    @default(now())
  
  user              User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

// For CSRF tokens and sessions
model Session {
  id                String      @id @default(cuid())
  sessionToken      String      @unique
  userId            String
  expires           DateTime
  
  @@index([userId])
  @@index([sessionToken])
}